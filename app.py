import os
import requests
import streamlit as st
from difflib import SequenceMatcher
from openai import OpenAI

# ===== API KEY HANDLING =====
def _get_api_key():
    # 1) Railway/Heroku/Render ‚Äì ƒçteme z ENV
    key = os.getenv("OPENAI_API_KEY")
    if key:
        return key
    # 2) Streamlit Cloud ‚Äì fallback na st.secrets
    try:
        return st.secrets["OPENAI_API_KEY"]
    except Exception:
        return None

_api_key = _get_api_key()
if not _api_key:
    st.error("Chyb√≠ OPENAI_API_KEY. Nastav v Railway ‚Üí Variables, nebo vlo≈æ do .streamlit/secrets.toml.")
    st.stop()

client = OpenAI(api_key=_api_key)

# ===== ARES API SEARCH =====
def ares_search(query, limit=20):
    url = "https://ares.gov.cz/ekonomicke-subjekty-v-be/rest/ekonomicke-subjekty"
    params = {"obchodniJmeno": query, "pocet": limit}
    try:
        r = requests.get(url, params=params, timeout=15)
        if r.status_code == 200:
            data = r.json()
            return [item["obchodniJmeno"] for item in data.get("ekonomickeSubjekty", [])]
    except Exception as e:
        st.warning(f"Chyba p≈ôi vol√°n√≠ ARES: {e}")
    return []

# ===== NAME SIMILARITY =====
def similarity(a, b):
    return SequenceMatcher(None, a.lower(), b.lower()).ratio() * 100

# ===== GENERATE CANDIDATES WITH AI =====
def generate_names(keywords, style, n=10):
    prompt = f"""
    Vymysli {n} n√°vrh≈Ø obchodn√≠ch n√°zv≈Ø pro firmu.
    Kl√≠ƒçov√° slova: {keywords}
    Styl: {style if style else "modern√≠, struƒçn√©, nezamƒõniteln√©"}
    Pi≈° pouze n√°zvy, ka≈æd√Ω na nov√Ω ≈ô√°dek.
    """
    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7,
    )
    text = resp.choices[0].message.content.strip()
    return [line.strip() for line in text.split("\n") if line.strip()]

# ===== STREAMLIT UI =====
st.title("üöÄ Gener√°tor n√°zv≈Ø firem + kontrola v ARES (CZ)")

with st.expander("‚öôÔ∏è Nastaven√≠"):
    n = st.slider("Poƒçet n√°vrh≈Ø", 5, 20, 10)
    style = st.text_input("Styl (voliteln√©)", "modern√≠, struƒçn√©, nezamƒõniteln√©")
    limit = st.slider("Kolik v√Ωsledk≈Ø st√°hnout z ARES", 10, 50, 20)
    threshold_high = st.slider("Hranice 'pravdƒõpodobnƒõ zamƒõniteln√©' (%)", 70, 100, 90)
    threshold_mid = st.slider("Hranice 'pozor ‚Äì podobn√©' (%)", 50, 100, 80)

keywords = st.text_input("Zadej obor/kl√≠ƒçov√° slova (nap≈ô. AI ≈°kolen√≠, z√°meƒçnictv√≠, kav√°rna):")

if st.button("Vygenerovat a zkontrolovat") and keywords:
    st.info("Generuji n√°vrhy...")
    candidates = generate_names(keywords, style, n)

    st.success("Hotovo. Kontroluji ARES...")
    all_hits = []
    for cand in candidates:
        hits = ares_search(cand, limit=limit)
        results = []
        for h in hits:
            sim = similarity(cand, h)
            if sim >= threshold_high:
                results.append((h, sim, "‚ùå Pravdƒõpodobnƒõ zamƒõniteln√©"))
            elif sim >= threshold_mid:
                results.append((h, sim, "‚ö†Ô∏è Podobn√©"))
        all_hits.append((cand, results))

    for cand, results in all_hits:
        st.subheader(cand)
        if not results:
            st.write("‚úÖ ≈Ω√°dn√© podobn√© n√°zvy v ARES.")
        else:
            for r in results:
                st.write(f"{r[2]} ‚Äî {r[0]} ({r[1]:.1f} %)")
